security:
    enable_authenticator_manager: true
    password_hashers:
        App\Entity\User:
            algorithm: bcrypt
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(wdt)|css|images|js|_profiler)/
            security: false
        login:
            user_checker: App\Security\UserChecker\LoginUserChecker
            provider: app_user_provider
            pattern: ^/login
            stateless: true
            json_login:
                check_path: /login
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        main:
            pattern: ^(?!/api)
            stateless: true
            provider: app_user_provider
            methods: [^OPTIONS]
            guard:
                authenticators:
                    - 'App\Security\LexitBundleJwtTokenAuthenticator'

    # >WARNING< cannot rely on user logic in `allow_if` in here, as it will not have the token in request at this point (dunno why)
    access_control:
        # public routes
        - { path: ^/login$, role: PUBLIC_ACCESS }
        - { path: ^/register-user, roles: PUBLIC_ACCESS }
        - { path: ^/register-user, roles: PUBLIC_ACCESS }
        - { path: ^/reset-password, roles: PUBLIC_ACCESS }
        - { path: ^/user/base-data/email/change, roles: PUBLIC_ACCESS }
        - { path: ^/download, roles: PUBLIC_ACCESS }

          # special paths
        - { path: ^/.*, roles: IS_AUTHENTICATED_FULLY } # all other paths - must always be last

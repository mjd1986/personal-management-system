# run nginx in foreground
daemon off;

# you must set worker processes based on your CPU cores, nginx does not benefit from setting more than that
worker_processes 1;

# number of file descriptors used for nginx
# the limit for the maximum FDs on the server is usually set by the OS.
# if you don't set FD's then OS settings will be used which is by default 2000
worker_rlimit_nofile 100000;

#error_log  logs/error.log;
error_log stderr notice;

events {
    # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
    worker_connections 4000;
}

http {

        ####################### OPTIMIZATION ##############################
        # https://gist.github.com/denji/8359866                          #
        ###################################################################

        # cache informations about FDs, frequently accessed files
        # can boost performance, but you need to test those values
        open_file_cache max=200000 inactive=20s;
        open_file_cache_valid 30s;
        open_file_cache_min_uses 2;
        open_file_cache_errors on;

        # send headers in one piece, it is better than sending them one by one
        tcp_nopush on;

        # don't buffer data sent, good for small data bursts in real time
        tcp_nodelay on;

        # reduce the data that needs to be sent over network -- for testing environment
        gzip on;
        # gzip_static on;
        gzip_min_length 10240;
        gzip_comp_level 1;
        gzip_vary on;
        gzip_disable msie6;
        gzip_proxied expired no-cache no-store private auth;
        gzip_types
            # text/html is always compressed by HttpGzipModule
            text/css
            text/javascript
            text/xml
            text/plain
            text/x-component
            application/javascript
            application/x-javascript
            application/json
            application/xml
            application/rss+xml
            application/atom+xml
            font/truetype
            font/opentype
            application/vnd.ms-fontobject
            image/svg+xml;

            # allow the server to close connection on non responding client, this will free up memory
            reset_timedout_connection on;

            # request timed out -- default 60
            client_body_timeout 10;

            # if client stop responding, free up memory -- default 60
            send_timeout 2;

            # server will close connection after this time -- default 75
            keepalive_timeout 30;

            # number of requests client can make over keep-alive -- for testing environment
            keepalive_requests 100000;

        ### My optimizations ###
        # https://stackoverflow.com/questions/38711282/nginx-slow-static-file-serving-slower-than-node
        # speeds up serving files in storage modules
        sendfile_max_chunk 512k;

        # Some other random attempts to make things faster
        client_body_buffer_size 10K;
        client_header_buffer_size 1k;
        large_client_header_buffers 2 1k;

    server {
        listen 80 default;

        http2 on;

        client_max_body_size 108M;

        root /application/public;
        index index.php;

        if (!-e $request_filename) {
            rewrite ^.*$ /index.php last;
        }

        location ~ \.php$ {
            fastcgi_pass pms-php-fpm:9000;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param PHP_VALUE "error_log=/var/log/nginx/application_php_errors.log";
            fastcgi_buffers 16 16k;
            fastcgi_buffer_size 32k;
            include fastcgi_params;
        }
    }
}